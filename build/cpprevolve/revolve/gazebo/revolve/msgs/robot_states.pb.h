// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_states.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_5fstates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_5fstates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "time.pb.h"
#include "pose.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_5fstates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_5fstates_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fstates_2eproto;
namespace revolve {
namespace msgs {
class Orientation;
struct OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class RobotState;
struct RobotStateDefaultTypeInternal;
extern RobotStateDefaultTypeInternal _RobotState_default_instance_;
class RobotStates;
struct RobotStatesDefaultTypeInternal;
extern RobotStatesDefaultTypeInternal _RobotStates_default_instance_;
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> ::revolve::msgs::Orientation* Arena::CreateMaybeMessage<::revolve::msgs::Orientation>(Arena*);
template<> ::revolve::msgs::RobotState* Arena::CreateMaybeMessage<::revolve::msgs::RobotState>(Arena*);
template<> ::revolve::msgs::RobotStates* Arena::CreateMaybeMessage<::revolve::msgs::RobotStates>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace revolve {
namespace msgs {

// ===================================================================

class Orientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  ~Orientation() override;
  explicit constexpr Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return new Orientation();
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Orientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecForwardFieldNumber = 1,
    kVecLeftFieldNumber = 2,
    kVecBackFieldNumber = 3,
    kVecRightFieldNumber = 4,
  };
  // optional .gazebo.msgs.Vector3d vec_forward = 1;
  bool has_vec_forward() const;
  private:
  bool _internal_has_vec_forward() const;
  public:
  void clear_vec_forward();
  const ::gazebo::msgs::Vector3d& vec_forward() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Vector3d* release_vec_forward();
  ::gazebo::msgs::Vector3d* mutable_vec_forward();
  void set_allocated_vec_forward(::gazebo::msgs::Vector3d* vec_forward);
  private:
  const ::gazebo::msgs::Vector3d& _internal_vec_forward() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_vec_forward();
  public:
  void unsafe_arena_set_allocated_vec_forward(
      ::gazebo::msgs::Vector3d* vec_forward);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_vec_forward();

  // optional .gazebo.msgs.Vector3d vec_left = 2;
  bool has_vec_left() const;
  private:
  bool _internal_has_vec_left() const;
  public:
  void clear_vec_left();
  const ::gazebo::msgs::Vector3d& vec_left() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Vector3d* release_vec_left();
  ::gazebo::msgs::Vector3d* mutable_vec_left();
  void set_allocated_vec_left(::gazebo::msgs::Vector3d* vec_left);
  private:
  const ::gazebo::msgs::Vector3d& _internal_vec_left() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_vec_left();
  public:
  void unsafe_arena_set_allocated_vec_left(
      ::gazebo::msgs::Vector3d* vec_left);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_vec_left();

  // optional .gazebo.msgs.Vector3d vec_back = 3;
  bool has_vec_back() const;
  private:
  bool _internal_has_vec_back() const;
  public:
  void clear_vec_back();
  const ::gazebo::msgs::Vector3d& vec_back() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Vector3d* release_vec_back();
  ::gazebo::msgs::Vector3d* mutable_vec_back();
  void set_allocated_vec_back(::gazebo::msgs::Vector3d* vec_back);
  private:
  const ::gazebo::msgs::Vector3d& _internal_vec_back() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_vec_back();
  public:
  void unsafe_arena_set_allocated_vec_back(
      ::gazebo::msgs::Vector3d* vec_back);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_vec_back();

  // optional .gazebo.msgs.Vector3d vec_right = 4;
  bool has_vec_right() const;
  private:
  bool _internal_has_vec_right() const;
  public:
  void clear_vec_right();
  const ::gazebo::msgs::Vector3d& vec_right() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Vector3d* release_vec_right();
  ::gazebo::msgs::Vector3d* mutable_vec_right();
  void set_allocated_vec_right(::gazebo::msgs::Vector3d* vec_right);
  private:
  const ::gazebo::msgs::Vector3d& _internal_vec_right() const;
  ::gazebo::msgs::Vector3d* _internal_mutable_vec_right();
  public:
  void unsafe_arena_set_allocated_vec_right(
      ::gazebo::msgs::Vector3d* vec_right);
  ::gazebo::msgs::Vector3d* unsafe_arena_release_vec_right();

  // @@protoc_insertion_point(class_scope:revolve.msgs.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::gazebo::msgs::Vector3d* vec_forward_;
  ::gazebo::msgs::Vector3d* vec_left_;
  ::gazebo::msgs::Vector3d* vec_back_;
  ::gazebo::msgs::Vector3d* vec_right_;
  friend struct ::TableStruct_robot_5fstates_2eproto;
};
// -------------------------------------------------------------------

class RobotState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.RobotState) */ {
 public:
  inline RobotState() : RobotState(nullptr) {}
  ~RobotState() override;
  explicit constexpr RobotState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotState(const RobotState& from);
  RobotState(RobotState&& from) noexcept
    : RobotState() {
    *this = ::std::move(from);
  }

  inline RobotState& operator=(const RobotState& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotState& operator=(RobotState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotState& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotState* internal_default_instance() {
    return reinterpret_cast<const RobotState*>(
               &_RobotState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotState& a, RobotState& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotState* New() const final {
    return new RobotState();
  }

  RobotState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.RobotState";
  }
  protected:
  explicit RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPoseFieldNumber = 3,
    kOrientationVecsFieldNumber = 5,
    kIdFieldNumber = 1,
    kDeadFieldNumber = 4,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .gazebo.msgs.Pose pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::gazebo::msgs::Pose& pose() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);
  private:
  const ::gazebo::msgs::Pose& _internal_pose() const;
  ::gazebo::msgs::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::gazebo::msgs::Pose* pose);
  ::gazebo::msgs::Pose* unsafe_arena_release_pose();

  // optional .revolve.msgs.Orientation orientation_vecs = 5;
  bool has_orientation_vecs() const;
  private:
  bool _internal_has_orientation_vecs() const;
  public:
  void clear_orientation_vecs();
  const ::revolve::msgs::Orientation& orientation_vecs() const;
  PROTOBUF_MUST_USE_RESULT ::revolve::msgs::Orientation* release_orientation_vecs();
  ::revolve::msgs::Orientation* mutable_orientation_vecs();
  void set_allocated_orientation_vecs(::revolve::msgs::Orientation* orientation_vecs);
  private:
  const ::revolve::msgs::Orientation& _internal_orientation_vecs() const;
  ::revolve::msgs::Orientation* _internal_mutable_orientation_vecs();
  public:
  void unsafe_arena_set_allocated_orientation_vecs(
      ::revolve::msgs::Orientation* orientation_vecs);
  ::revolve::msgs::Orientation* unsafe_arena_release_orientation_vecs();

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool dead = 4;
  bool has_dead() const;
  private:
  bool _internal_has_dead() const;
  public:
  void clear_dead();
  bool dead() const;
  void set_dead(bool value);
  private:
  bool _internal_dead() const;
  void _internal_set_dead(bool value);
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.RobotState)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::gazebo::msgs::Pose* pose_;
  ::revolve::msgs::Orientation* orientation_vecs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool dead_;
  friend struct ::TableStruct_robot_5fstates_2eproto;
};
// -------------------------------------------------------------------

class RobotStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.RobotStates) */ {
 public:
  inline RobotStates() : RobotStates(nullptr) {}
  ~RobotStates() override;
  explicit constexpr RobotStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotStates(const RobotStates& from);
  RobotStates(RobotStates&& from) noexcept
    : RobotStates() {
    *this = ::std::move(from);
  }

  inline RobotStates& operator=(const RobotStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotStates& operator=(RobotStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotStates* internal_default_instance() {
    return reinterpret_cast<const RobotStates*>(
               &_RobotStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotStates& a, RobotStates& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotStates* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RobotStates* New() const final {
    return new RobotStates();
  }

  RobotStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RobotStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RobotStates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotStates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.RobotStates";
  }
  protected:
  explicit RobotStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotStateFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // repeated .revolve.msgs.RobotState robot_state = 2;
  int robot_state_size() const;
  private:
  int _internal_robot_state_size() const;
  public:
  void clear_robot_state();
  ::revolve::msgs::RobotState* mutable_robot_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::RobotState >*
      mutable_robot_state();
  private:
  const ::revolve::msgs::RobotState& _internal_robot_state(int index) const;
  ::revolve::msgs::RobotState* _internal_add_robot_state();
  public:
  const ::revolve::msgs::RobotState& robot_state(int index) const;
  ::revolve::msgs::RobotState* add_robot_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::RobotState >&
      robot_state() const;

  // required .gazebo.msgs.Time time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::gazebo::msgs::Time& time() const;
  PROTOBUF_MUST_USE_RESULT ::gazebo::msgs::Time* release_time();
  ::gazebo::msgs::Time* mutable_time();
  void set_allocated_time(::gazebo::msgs::Time* time);
  private:
  const ::gazebo::msgs::Time& _internal_time() const;
  ::gazebo::msgs::Time* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::gazebo::msgs::Time* time);
  ::gazebo::msgs::Time* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:revolve.msgs.RobotStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::RobotState > robot_state_;
  ::gazebo::msgs::Time* time_;
  friend struct ::TableStruct_robot_5fstates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Orientation

// optional .gazebo.msgs.Vector3d vec_forward = 1;
inline bool Orientation::_internal_has_vec_forward() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vec_forward_ != nullptr);
  return value;
}
inline bool Orientation::has_vec_forward() const {
  return _internal_has_vec_forward();
}
inline const ::gazebo::msgs::Vector3d& Orientation::_internal_vec_forward() const {
  const ::gazebo::msgs::Vector3d* p = vec_forward_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector3d&>(
      ::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Orientation::vec_forward() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Orientation.vec_forward)
  return _internal_vec_forward();
}
inline void Orientation::unsafe_arena_set_allocated_vec_forward(
    ::gazebo::msgs::Vector3d* vec_forward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_forward_);
  }
  vec_forward_ = vec_forward;
  if (vec_forward) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Orientation.vec_forward)
}
inline ::gazebo::msgs::Vector3d* Orientation::release_vec_forward() {
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = vec_forward_;
  vec_forward_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::unsafe_arena_release_vec_forward() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Orientation.vec_forward)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Vector3d* temp = vec_forward_;
  vec_forward_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::_internal_mutable_vec_forward() {
  _has_bits_[0] |= 0x00000001u;
  if (vec_forward_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaForAllocation());
    vec_forward_ = p;
  }
  return vec_forward_;
}
inline ::gazebo::msgs::Vector3d* Orientation::mutable_vec_forward() {
  ::gazebo::msgs::Vector3d* _msg = _internal_mutable_vec_forward();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Orientation.vec_forward)
  return _msg;
}
inline void Orientation::set_allocated_vec_forward(::gazebo::msgs::Vector3d* vec_forward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_forward_);
  }
  if (vec_forward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_forward));
    if (message_arena != submessage_arena) {
      vec_forward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec_forward, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vec_forward_ = vec_forward;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Orientation.vec_forward)
}

// optional .gazebo.msgs.Vector3d vec_left = 2;
inline bool Orientation::_internal_has_vec_left() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vec_left_ != nullptr);
  return value;
}
inline bool Orientation::has_vec_left() const {
  return _internal_has_vec_left();
}
inline const ::gazebo::msgs::Vector3d& Orientation::_internal_vec_left() const {
  const ::gazebo::msgs::Vector3d* p = vec_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector3d&>(
      ::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Orientation::vec_left() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Orientation.vec_left)
  return _internal_vec_left();
}
inline void Orientation::unsafe_arena_set_allocated_vec_left(
    ::gazebo::msgs::Vector3d* vec_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_left_);
  }
  vec_left_ = vec_left;
  if (vec_left) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Orientation.vec_left)
}
inline ::gazebo::msgs::Vector3d* Orientation::release_vec_left() {
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = vec_left_;
  vec_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::unsafe_arena_release_vec_left() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Orientation.vec_left)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Vector3d* temp = vec_left_;
  vec_left_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::_internal_mutable_vec_left() {
  _has_bits_[0] |= 0x00000002u;
  if (vec_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaForAllocation());
    vec_left_ = p;
  }
  return vec_left_;
}
inline ::gazebo::msgs::Vector3d* Orientation::mutable_vec_left() {
  ::gazebo::msgs::Vector3d* _msg = _internal_mutable_vec_left();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Orientation.vec_left)
  return _msg;
}
inline void Orientation::set_allocated_vec_left(::gazebo::msgs::Vector3d* vec_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_left_);
  }
  if (vec_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_left));
    if (message_arena != submessage_arena) {
      vec_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec_left, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vec_left_ = vec_left;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Orientation.vec_left)
}

// optional .gazebo.msgs.Vector3d vec_back = 3;
inline bool Orientation::_internal_has_vec_back() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vec_back_ != nullptr);
  return value;
}
inline bool Orientation::has_vec_back() const {
  return _internal_has_vec_back();
}
inline const ::gazebo::msgs::Vector3d& Orientation::_internal_vec_back() const {
  const ::gazebo::msgs::Vector3d* p = vec_back_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector3d&>(
      ::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Orientation::vec_back() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Orientation.vec_back)
  return _internal_vec_back();
}
inline void Orientation::unsafe_arena_set_allocated_vec_back(
    ::gazebo::msgs::Vector3d* vec_back) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_back_);
  }
  vec_back_ = vec_back;
  if (vec_back) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Orientation.vec_back)
}
inline ::gazebo::msgs::Vector3d* Orientation::release_vec_back() {
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector3d* temp = vec_back_;
  vec_back_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::unsafe_arena_release_vec_back() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Orientation.vec_back)
  _has_bits_[0] &= ~0x00000004u;
  ::gazebo::msgs::Vector3d* temp = vec_back_;
  vec_back_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::_internal_mutable_vec_back() {
  _has_bits_[0] |= 0x00000004u;
  if (vec_back_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaForAllocation());
    vec_back_ = p;
  }
  return vec_back_;
}
inline ::gazebo::msgs::Vector3d* Orientation::mutable_vec_back() {
  ::gazebo::msgs::Vector3d* _msg = _internal_mutable_vec_back();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Orientation.vec_back)
  return _msg;
}
inline void Orientation::set_allocated_vec_back(::gazebo::msgs::Vector3d* vec_back) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_back_);
  }
  if (vec_back) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_back));
    if (message_arena != submessage_arena) {
      vec_back = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec_back, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vec_back_ = vec_back;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Orientation.vec_back)
}

// optional .gazebo.msgs.Vector3d vec_right = 4;
inline bool Orientation::_internal_has_vec_right() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vec_right_ != nullptr);
  return value;
}
inline bool Orientation::has_vec_right() const {
  return _internal_has_vec_right();
}
inline const ::gazebo::msgs::Vector3d& Orientation::_internal_vec_right() const {
  const ::gazebo::msgs::Vector3d* p = vec_right_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Vector3d&>(
      ::gazebo::msgs::_Vector3d_default_instance_);
}
inline const ::gazebo::msgs::Vector3d& Orientation::vec_right() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Orientation.vec_right)
  return _internal_vec_right();
}
inline void Orientation::unsafe_arena_set_allocated_vec_right(
    ::gazebo::msgs::Vector3d* vec_right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_right_);
  }
  vec_right_ = vec_right;
  if (vec_right) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Orientation.vec_right)
}
inline ::gazebo::msgs::Vector3d* Orientation::release_vec_right() {
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = vec_right_;
  vec_right_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::unsafe_arena_release_vec_right() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Orientation.vec_right)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Vector3d* temp = vec_right_;
  vec_right_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Orientation::_internal_mutable_vec_right() {
  _has_bits_[0] |= 0x00000008u;
  if (vec_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaForAllocation());
    vec_right_ = p;
  }
  return vec_right_;
}
inline ::gazebo::msgs::Vector3d* Orientation::mutable_vec_right() {
  ::gazebo::msgs::Vector3d* _msg = _internal_mutable_vec_right();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Orientation.vec_right)
  return _msg;
}
inline void Orientation::set_allocated_vec_right(::gazebo::msgs::Vector3d* vec_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_right_);
  }
  if (vec_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vec_right));
    if (message_arena != submessage_arena) {
      vec_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vec_right, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vec_right_ = vec_right;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Orientation.vec_right)
}

// -------------------------------------------------------------------

// RobotState

// required uint32 id = 1;
inline bool RobotState::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotState::has_id() const {
  return _internal_has_id();
}
inline void RobotState::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotState::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RobotState::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.id)
  return _internal_id();
}
inline void RobotState::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void RobotState::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.RobotState.id)
}

// required string name = 2;
inline bool RobotState::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotState::has_name() const {
  return _internal_has_name();
}
inline void RobotState::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RobotState::name() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RobotState::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.RobotState.name)
}
inline std::string* RobotState::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotState.name)
  return _s;
}
inline const std::string& RobotState::_internal_name() const {
  return name_.Get();
}
inline void RobotState::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RobotState::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RobotState::release_name() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotState.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RobotState::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotState.name)
}

// required .gazebo.msgs.Pose pose = 3;
inline bool RobotState::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool RobotState::has_pose() const {
  return _internal_has_pose();
}
inline const ::gazebo::msgs::Pose& RobotState::_internal_pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Pose&>(
      ::gazebo::msgs::_Pose_default_instance_);
}
inline const ::gazebo::msgs::Pose& RobotState::pose() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.pose)
  return _internal_pose();
}
inline void RobotState::unsafe_arena_set_allocated_pose(
    ::gazebo::msgs::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.RobotState.pose)
}
inline ::gazebo::msgs::Pose* RobotState::release_pose() {
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Pose* RobotState::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotState.pose)
  _has_bits_[0] &= ~0x00000002u;
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Pose* RobotState::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000002u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::gazebo::msgs::Pose* RobotState::mutable_pose() {
  ::gazebo::msgs::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotState.pose)
  return _msg;
}
inline void RobotState::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotState.pose)
}

// optional bool dead = 4;
inline bool RobotState::_internal_has_dead() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotState::has_dead() const {
  return _internal_has_dead();
}
inline void RobotState::clear_dead() {
  dead_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool RobotState::_internal_dead() const {
  return dead_;
}
inline bool RobotState::dead() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.dead)
  return _internal_dead();
}
inline void RobotState::_internal_set_dead(bool value) {
  _has_bits_[0] |= 0x00000010u;
  dead_ = value;
}
inline void RobotState::set_dead(bool value) {
  _internal_set_dead(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.RobotState.dead)
}

// optional .revolve.msgs.Orientation orientation_vecs = 5;
inline bool RobotState::_internal_has_orientation_vecs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_vecs_ != nullptr);
  return value;
}
inline bool RobotState::has_orientation_vecs() const {
  return _internal_has_orientation_vecs();
}
inline void RobotState::clear_orientation_vecs() {
  if (orientation_vecs_ != nullptr) orientation_vecs_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::revolve::msgs::Orientation& RobotState::_internal_orientation_vecs() const {
  const ::revolve::msgs::Orientation* p = orientation_vecs_;
  return p != nullptr ? *p : reinterpret_cast<const ::revolve::msgs::Orientation&>(
      ::revolve::msgs::_Orientation_default_instance_);
}
inline const ::revolve::msgs::Orientation& RobotState::orientation_vecs() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotState.orientation_vecs)
  return _internal_orientation_vecs();
}
inline void RobotState::unsafe_arena_set_allocated_orientation_vecs(
    ::revolve::msgs::Orientation* orientation_vecs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_vecs_);
  }
  orientation_vecs_ = orientation_vecs;
  if (orientation_vecs) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.RobotState.orientation_vecs)
}
inline ::revolve::msgs::Orientation* RobotState::release_orientation_vecs() {
  _has_bits_[0] &= ~0x00000004u;
  ::revolve::msgs::Orientation* temp = orientation_vecs_;
  orientation_vecs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::revolve::msgs::Orientation* RobotState::unsafe_arena_release_orientation_vecs() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotState.orientation_vecs)
  _has_bits_[0] &= ~0x00000004u;
  ::revolve::msgs::Orientation* temp = orientation_vecs_;
  orientation_vecs_ = nullptr;
  return temp;
}
inline ::revolve::msgs::Orientation* RobotState::_internal_mutable_orientation_vecs() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_vecs_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::Orientation>(GetArenaForAllocation());
    orientation_vecs_ = p;
  }
  return orientation_vecs_;
}
inline ::revolve::msgs::Orientation* RobotState::mutable_orientation_vecs() {
  ::revolve::msgs::Orientation* _msg = _internal_mutable_orientation_vecs();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotState.orientation_vecs)
  return _msg;
}
inline void RobotState::set_allocated_orientation_vecs(::revolve::msgs::Orientation* orientation_vecs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete orientation_vecs_;
  }
  if (orientation_vecs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::revolve::msgs::Orientation>::GetOwningArena(orientation_vecs);
    if (message_arena != submessage_arena) {
      orientation_vecs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_vecs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_vecs_ = orientation_vecs;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotState.orientation_vecs)
}

// -------------------------------------------------------------------

// RobotStates

// required .gazebo.msgs.Time time = 1;
inline bool RobotStates::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || time_ != nullptr);
  return value;
}
inline bool RobotStates::has_time() const {
  return _internal_has_time();
}
inline const ::gazebo::msgs::Time& RobotStates::_internal_time() const {
  const ::gazebo::msgs::Time* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::gazebo::msgs::Time&>(
      ::gazebo::msgs::_Time_default_instance_);
}
inline const ::gazebo::msgs::Time& RobotStates::time() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotStates.time)
  return _internal_time();
}
inline void RobotStates::unsafe_arena_set_allocated_time(
    ::gazebo::msgs::Time* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.RobotStates.time)
}
inline ::gazebo::msgs::Time* RobotStates::release_time() {
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Time* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gazebo::msgs::Time* RobotStates::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:revolve.msgs.RobotStates.time)
  _has_bits_[0] &= ~0x00000001u;
  ::gazebo::msgs::Time* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Time* RobotStates::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Time>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::gazebo::msgs::Time* RobotStates::mutable_time() {
  ::gazebo::msgs::Time* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotStates.time)
  return _msg;
}
inline void RobotStates::set_allocated_time(::gazebo::msgs::Time* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.RobotStates.time)
}

// repeated .revolve.msgs.RobotState robot_state = 2;
inline int RobotStates::_internal_robot_state_size() const {
  return robot_state_.size();
}
inline int RobotStates::robot_state_size() const {
  return _internal_robot_state_size();
}
inline void RobotStates::clear_robot_state() {
  robot_state_.Clear();
}
inline ::revolve::msgs::RobotState* RobotStates::mutable_robot_state(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.RobotStates.robot_state)
  return robot_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::RobotState >*
RobotStates::mutable_robot_state() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.RobotStates.robot_state)
  return &robot_state_;
}
inline const ::revolve::msgs::RobotState& RobotStates::_internal_robot_state(int index) const {
  return robot_state_.Get(index);
}
inline const ::revolve::msgs::RobotState& RobotStates::robot_state(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.RobotStates.robot_state)
  return _internal_robot_state(index);
}
inline ::revolve::msgs::RobotState* RobotStates::_internal_add_robot_state() {
  return robot_state_.Add();
}
inline ::revolve::msgs::RobotState* RobotStates::add_robot_state() {
  ::revolve::msgs::RobotState* _add = _internal_add_robot_state();
  // @@protoc_insertion_point(field_add:revolve.msgs.RobotStates.robot_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::RobotState >&
RobotStates::robot_state() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.RobotStates.robot_state)
  return robot_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_5fstates_2eproto
