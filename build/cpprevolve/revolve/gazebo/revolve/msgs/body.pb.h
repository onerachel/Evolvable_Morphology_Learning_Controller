// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: body.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_body_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_body_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_body_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_body_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_body_2eproto;
namespace revolve {
namespace msgs {
class Body;
struct BodyDefaultTypeInternal;
extern BodyDefaultTypeInternal _Body_default_instance_;
class BodyConnection;
struct BodyConnectionDefaultTypeInternal;
extern BodyConnectionDefaultTypeInternal _BodyConnection_default_instance_;
class BodyPart;
struct BodyPartDefaultTypeInternal;
extern BodyPartDefaultTypeInternal _BodyPart_default_instance_;
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> ::revolve::msgs::Body* Arena::CreateMaybeMessage<::revolve::msgs::Body>(Arena*);
template<> ::revolve::msgs::BodyConnection* Arena::CreateMaybeMessage<::revolve::msgs::BodyConnection>(Arena*);
template<> ::revolve::msgs::BodyPart* Arena::CreateMaybeMessage<::revolve::msgs::BodyPart>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace revolve {
namespace msgs {

// ===================================================================

class BodyPart final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BodyPart) */ {
 public:
  inline BodyPart() : BodyPart(nullptr) {}
  ~BodyPart() override;
  explicit constexpr BodyPart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BodyPart(const BodyPart& from);
  BodyPart(BodyPart&& from) noexcept
    : BodyPart() {
    *this = ::std::move(from);
  }

  inline BodyPart& operator=(const BodyPart& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyPart& operator=(BodyPart&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BodyPart& default_instance() {
    return *internal_default_instance();
  }
  static inline const BodyPart* internal_default_instance() {
    return reinterpret_cast<const BodyPart*>(
               &_BodyPart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BodyPart& a, BodyPart& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyPart* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyPart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyPart* New() const final {
    return new BodyPart();
  }

  BodyPart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyPart>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BodyPart& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BodyPart& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyPart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.BodyPart";
  }
  protected:
  explicit BodyPart(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 6,
    kParamFieldNumber = 7,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kLabelFieldNumber = 8,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kOrientationFieldNumber = 5,
  };
  // repeated .revolve.msgs.BodyConnection child = 6;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::revolve::msgs::BodyConnection* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::BodyConnection >*
      mutable_child();
  private:
  const ::revolve::msgs::BodyConnection& _internal_child(int index) const;
  ::revolve::msgs::BodyConnection* _internal_add_child();
  public:
  const ::revolve::msgs::BodyConnection& child(int index) const;
  ::revolve::msgs::BodyConnection* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::BodyConnection >&
      child() const;

  // repeated .revolve.msgs.Parameter param = 7;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  ::revolve::msgs::Parameter* mutable_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >*
      mutable_param();
  private:
  const ::revolve::msgs::Parameter& _internal_param(int index) const;
  ::revolve::msgs::Parameter* _internal_add_param();
  public:
  const ::revolve::msgs::Parameter& param(int index) const;
  ::revolve::msgs::Parameter* add_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >&
      param() const;

  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string label = 8;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // required int32 x = 3;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 y = 4;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double orientation = 5;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  double orientation() const;
  void set_orientation(double value);
  private:
  double _internal_orientation() const;
  void _internal_set_orientation(double value);
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.BodyPart)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::BodyConnection > child_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter > param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  double orientation_;
  friend struct ::TableStruct_body_2eproto;
};
// -------------------------------------------------------------------

class BodyConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.BodyConnection) */ {
 public:
  inline BodyConnection() : BodyConnection(nullptr) {}
  ~BodyConnection() override;
  explicit constexpr BodyConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BodyConnection(const BodyConnection& from);
  BodyConnection(BodyConnection&& from) noexcept
    : BodyConnection() {
    *this = ::std::move(from);
  }

  inline BodyConnection& operator=(const BodyConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline BodyConnection& operator=(BodyConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BodyConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const BodyConnection* internal_default_instance() {
    return reinterpret_cast<const BodyConnection*>(
               &_BodyConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BodyConnection& a, BodyConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(BodyConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BodyConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BodyConnection* New() const final {
    return new BodyConnection();
  }

  BodyConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BodyConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BodyConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BodyConnection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodyConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.BodyConnection";
  }
  protected:
  explicit BodyConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartFieldNumber = 3,
    kSrcSlotFieldNumber = 1,
    kDstSlotFieldNumber = 2,
  };
  // required .revolve.msgs.BodyPart part = 3;
  bool has_part() const;
  private:
  bool _internal_has_part() const;
  public:
  void clear_part();
  const ::revolve::msgs::BodyPart& part() const;
  PROTOBUF_MUST_USE_RESULT ::revolve::msgs::BodyPart* release_part();
  ::revolve::msgs::BodyPart* mutable_part();
  void set_allocated_part(::revolve::msgs::BodyPart* part);
  private:
  const ::revolve::msgs::BodyPart& _internal_part() const;
  ::revolve::msgs::BodyPart* _internal_mutable_part();
  public:
  void unsafe_arena_set_allocated_part(
      ::revolve::msgs::BodyPart* part);
  ::revolve::msgs::BodyPart* unsafe_arena_release_part();

  // required int32 src_slot = 1;
  bool has_src_slot() const;
  private:
  bool _internal_has_src_slot() const;
  public:
  void clear_src_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 src_slot() const;
  void set_src_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_src_slot() const;
  void _internal_set_src_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 dst_slot = 2;
  bool has_dst_slot() const;
  private:
  bool _internal_has_dst_slot() const;
  public:
  void clear_dst_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 dst_slot() const;
  void set_dst_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dst_slot() const;
  void _internal_set_dst_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.BodyConnection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::revolve::msgs::BodyPart* part_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_slot_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_slot_;
  friend struct ::TableStruct_body_2eproto;
};
// -------------------------------------------------------------------

class Body final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Body) */ {
 public:
  inline Body() : Body(nullptr) {}
  ~Body() override;
  explicit constexpr Body(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Body(const Body& from);
  Body(Body&& from) noexcept
    : Body() {
    *this = ::std::move(from);
  }

  inline Body& operator=(const Body& from) {
    CopyFrom(from);
    return *this;
  }
  inline Body& operator=(Body&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Body& default_instance() {
    return *internal_default_instance();
  }
  static inline const Body* internal_default_instance() {
    return reinterpret_cast<const Body*>(
               &_Body_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Body& a, Body& b) {
    a.Swap(&b);
  }
  inline void Swap(Body* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Body* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Body* New() const final {
    return new Body();
  }

  Body* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Body>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Body& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Body& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Body* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.Body";
  }
  protected:
  explicit Body(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootFieldNumber = 1,
  };
  // required .revolve.msgs.BodyPart root = 1;
  bool has_root() const;
  private:
  bool _internal_has_root() const;
  public:
  void clear_root();
  const ::revolve::msgs::BodyPart& root() const;
  PROTOBUF_MUST_USE_RESULT ::revolve::msgs::BodyPart* release_root();
  ::revolve::msgs::BodyPart* mutable_root();
  void set_allocated_root(::revolve::msgs::BodyPart* root);
  private:
  const ::revolve::msgs::BodyPart& _internal_root() const;
  ::revolve::msgs::BodyPart* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::revolve::msgs::BodyPart* root);
  ::revolve::msgs::BodyPart* unsafe_arena_release_root();

  // @@protoc_insertion_point(class_scope:revolve.msgs.Body)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::revolve::msgs::BodyPart* root_;
  friend struct ::TableStruct_body_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BodyPart

// required string id = 1;
inline bool BodyPart::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BodyPart::has_id() const {
  return _internal_has_id();
}
inline void BodyPart::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BodyPart::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BodyPart::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.id)
}
inline std::string* BodyPart::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyPart.id)
  return _s;
}
inline const std::string& BodyPart::_internal_id() const {
  return id_.Get();
}
inline void BodyPart::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BodyPart::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BodyPart::release_id() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyPart.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BodyPart::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyPart.id)
}

// required string type = 2;
inline bool BodyPart::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BodyPart::has_type() const {
  return _internal_has_type();
}
inline void BodyPart::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BodyPart::type() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BodyPart::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.type)
}
inline std::string* BodyPart::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyPart.type)
  return _s;
}
inline const std::string& BodyPart::_internal_type() const {
  return type_.Get();
}
inline void BodyPart::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BodyPart::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BodyPart::release_type() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyPart.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BodyPart::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyPart.type)
}

// required int32 x = 3;
inline bool BodyPart::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BodyPart::has_x() const {
  return _internal_has_x();
}
inline void BodyPart::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyPart::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyPart::x() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.x)
  return _internal_x();
}
inline void BodyPart::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  x_ = value;
}
inline void BodyPart::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.x)
}

// required int32 y = 4;
inline bool BodyPart::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BodyPart::has_y() const {
  return _internal_has_y();
}
inline void BodyPart::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyPart::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyPart::y() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.y)
  return _internal_y();
}
inline void BodyPart::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  y_ = value;
}
inline void BodyPart::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.y)
}

// required double orientation = 5;
inline bool BodyPart::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BodyPart::has_orientation() const {
  return _internal_has_orientation();
}
inline void BodyPart::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double BodyPart::_internal_orientation() const {
  return orientation_;
}
inline double BodyPart::orientation() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.orientation)
  return _internal_orientation();
}
inline void BodyPart::_internal_set_orientation(double value) {
  _has_bits_[0] |= 0x00000020u;
  orientation_ = value;
}
inline void BodyPart::set_orientation(double value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.orientation)
}

// repeated .revolve.msgs.BodyConnection child = 6;
inline int BodyPart::_internal_child_size() const {
  return child_.size();
}
inline int BodyPart::child_size() const {
  return _internal_child_size();
}
inline void BodyPart::clear_child() {
  child_.Clear();
}
inline ::revolve::msgs::BodyConnection* BodyPart::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyPart.child)
  return child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::BodyConnection >*
BodyPart::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.BodyPart.child)
  return &child_;
}
inline const ::revolve::msgs::BodyConnection& BodyPart::_internal_child(int index) const {
  return child_.Get(index);
}
inline const ::revolve::msgs::BodyConnection& BodyPart::child(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.child)
  return _internal_child(index);
}
inline ::revolve::msgs::BodyConnection* BodyPart::_internal_add_child() {
  return child_.Add();
}
inline ::revolve::msgs::BodyConnection* BodyPart::add_child() {
  ::revolve::msgs::BodyConnection* _add = _internal_add_child();
  // @@protoc_insertion_point(field_add:revolve.msgs.BodyPart.child)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::BodyConnection >&
BodyPart::child() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.BodyPart.child)
  return child_;
}

// repeated .revolve.msgs.Parameter param = 7;
inline int BodyPart::_internal_param_size() const {
  return param_.size();
}
inline int BodyPart::param_size() const {
  return _internal_param_size();
}
inline ::revolve::msgs::Parameter* BodyPart::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyPart.param)
  return param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >*
BodyPart::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.BodyPart.param)
  return &param_;
}
inline const ::revolve::msgs::Parameter& BodyPart::_internal_param(int index) const {
  return param_.Get(index);
}
inline const ::revolve::msgs::Parameter& BodyPart::param(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.param)
  return _internal_param(index);
}
inline ::revolve::msgs::Parameter* BodyPart::_internal_add_param() {
  return param_.Add();
}
inline ::revolve::msgs::Parameter* BodyPart::add_param() {
  ::revolve::msgs::Parameter* _add = _internal_add_param();
  // @@protoc_insertion_point(field_add:revolve.msgs.BodyPart.param)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >&
BodyPart::param() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.BodyPart.param)
  return param_;
}

// optional string label = 8;
inline bool BodyPart::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BodyPart::has_label() const {
  return _internal_has_label();
}
inline void BodyPart::clear_label() {
  label_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BodyPart::label() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyPart.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BodyPart::set_label(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyPart.label)
}
inline std::string* BodyPart::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyPart.label)
  return _s;
}
inline const std::string& BodyPart::_internal_label() const {
  return label_.Get();
}
inline void BodyPart::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BodyPart::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000004u;
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BodyPart::release_label() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyPart.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BodyPart::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyPart.label)
}

// -------------------------------------------------------------------

// BodyConnection

// required int32 src_slot = 1;
inline bool BodyConnection::_internal_has_src_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BodyConnection::has_src_slot() const {
  return _internal_has_src_slot();
}
inline void BodyConnection::clear_src_slot() {
  src_slot_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyConnection::_internal_src_slot() const {
  return src_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyConnection::src_slot() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyConnection.src_slot)
  return _internal_src_slot();
}
inline void BodyConnection::_internal_set_src_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  src_slot_ = value;
}
inline void BodyConnection::set_src_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_src_slot(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyConnection.src_slot)
}

// required int32 dst_slot = 2;
inline bool BodyConnection::_internal_has_dst_slot() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BodyConnection::has_dst_slot() const {
  return _internal_has_dst_slot();
}
inline void BodyConnection::clear_dst_slot() {
  dst_slot_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyConnection::_internal_dst_slot() const {
  return dst_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BodyConnection::dst_slot() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyConnection.dst_slot)
  return _internal_dst_slot();
}
inline void BodyConnection::_internal_set_dst_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  dst_slot_ = value;
}
inline void BodyConnection::set_dst_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dst_slot(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.BodyConnection.dst_slot)
}

// required .revolve.msgs.BodyPart part = 3;
inline bool BodyConnection::_internal_has_part() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || part_ != nullptr);
  return value;
}
inline bool BodyConnection::has_part() const {
  return _internal_has_part();
}
inline void BodyConnection::clear_part() {
  if (part_ != nullptr) part_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::revolve::msgs::BodyPart& BodyConnection::_internal_part() const {
  const ::revolve::msgs::BodyPart* p = part_;
  return p != nullptr ? *p : reinterpret_cast<const ::revolve::msgs::BodyPart&>(
      ::revolve::msgs::_BodyPart_default_instance_);
}
inline const ::revolve::msgs::BodyPart& BodyConnection::part() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.BodyConnection.part)
  return _internal_part();
}
inline void BodyConnection::unsafe_arena_set_allocated_part(
    ::revolve::msgs::BodyPart* part) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(part_);
  }
  part_ = part;
  if (part) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.BodyConnection.part)
}
inline ::revolve::msgs::BodyPart* BodyConnection::release_part() {
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BodyPart* temp = part_;
  part_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::revolve::msgs::BodyPart* BodyConnection::unsafe_arena_release_part() {
  // @@protoc_insertion_point(field_release:revolve.msgs.BodyConnection.part)
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BodyPart* temp = part_;
  part_ = nullptr;
  return temp;
}
inline ::revolve::msgs::BodyPart* BodyConnection::_internal_mutable_part() {
  _has_bits_[0] |= 0x00000001u;
  if (part_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::BodyPart>(GetArenaForAllocation());
    part_ = p;
  }
  return part_;
}
inline ::revolve::msgs::BodyPart* BodyConnection::mutable_part() {
  ::revolve::msgs::BodyPart* _msg = _internal_mutable_part();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.BodyConnection.part)
  return _msg;
}
inline void BodyConnection::set_allocated_part(::revolve::msgs::BodyPart* part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete part_;
  }
  if (part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::revolve::msgs::BodyPart>::GetOwningArena(part);
    if (message_arena != submessage_arena) {
      part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  part_ = part;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.BodyConnection.part)
}

// -------------------------------------------------------------------

// Body

// required .revolve.msgs.BodyPart root = 1;
inline bool Body::_internal_has_root() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || root_ != nullptr);
  return value;
}
inline bool Body::has_root() const {
  return _internal_has_root();
}
inline void Body::clear_root() {
  if (root_ != nullptr) root_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::revolve::msgs::BodyPart& Body::_internal_root() const {
  const ::revolve::msgs::BodyPart* p = root_;
  return p != nullptr ? *p : reinterpret_cast<const ::revolve::msgs::BodyPart&>(
      ::revolve::msgs::_BodyPart_default_instance_);
}
inline const ::revolve::msgs::BodyPart& Body::root() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Body.root)
  return _internal_root();
}
inline void Body::unsafe_arena_set_allocated_root(
    ::revolve::msgs::BodyPart* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root_);
  }
  root_ = root;
  if (root) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:revolve.msgs.Body.root)
}
inline ::revolve::msgs::BodyPart* Body::release_root() {
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BodyPart* temp = root_;
  root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::revolve::msgs::BodyPart* Body::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Body.root)
  _has_bits_[0] &= ~0x00000001u;
  ::revolve::msgs::BodyPart* temp = root_;
  root_ = nullptr;
  return temp;
}
inline ::revolve::msgs::BodyPart* Body::_internal_mutable_root() {
  _has_bits_[0] |= 0x00000001u;
  if (root_ == nullptr) {
    auto* p = CreateMaybeMessage<::revolve::msgs::BodyPart>(GetArenaForAllocation());
    root_ = p;
  }
  return root_;
}
inline ::revolve::msgs::BodyPart* Body::mutable_root() {
  ::revolve::msgs::BodyPart* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Body.root)
  return _msg;
}
inline void Body::set_allocated_root(::revolve::msgs::BodyPart* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete root_;
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::revolve::msgs::BodyPart>::GetOwningArena(root);
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_ = root;
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Body.root)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_body_2eproto
