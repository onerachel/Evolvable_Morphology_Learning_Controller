// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_states.proto

#include "robot_states.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace revolve {
namespace msgs {
constexpr Orientation::Orientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vec_forward_(nullptr)
  , vec_left_(nullptr)
  , vec_back_(nullptr)
  , vec_right_(nullptr){}
struct OrientationDefaultTypeInternal {
  constexpr OrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrientationDefaultTypeInternal _Orientation_default_instance_;
constexpr RobotState::RobotState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pose_(nullptr)
  , orientation_vecs_(nullptr)
  , id_(0u)
  , dead_(false){}
struct RobotStateDefaultTypeInternal {
  constexpr RobotStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotStateDefaultTypeInternal() {}
  union {
    RobotState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotStateDefaultTypeInternal _RobotState_default_instance_;
constexpr RobotStates::RobotStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : robot_state_()
  , time_(nullptr){}
struct RobotStatesDefaultTypeInternal {
  constexpr RobotStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RobotStatesDefaultTypeInternal() {}
  union {
    RobotStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RobotStatesDefaultTypeInternal _RobotStates_default_instance_;
}  // namespace msgs
}  // namespace revolve
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5fstates_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_robot_5fstates_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5fstates_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_5fstates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, vec_forward_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, vec_left_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, vec_back_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::Orientation, vec_right_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, id_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, name_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, pose_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, dead_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotState, orientation_vecs_),
  3,
  0,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotStates, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotStates, time_),
  PROTOBUF_FIELD_OFFSET(::revolve::msgs::RobotStates, robot_state_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::revolve::msgs::Orientation)},
  { 13, 23, sizeof(::revolve::msgs::RobotState)},
  { 28, 35, sizeof(::revolve::msgs::RobotStates)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_RobotState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::revolve::msgs::_RobotStates_default_instance_),
};

const char descriptor_table_protodef_robot_5fstates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022robot_states.proto\022\014revolve.msgs\032\ntime"
  ".proto\032\npose.proto\032\016vector3d.proto\"\265\001\n\013O"
  "rientation\022*\n\013vec_forward\030\001 \001(\0132\025.gazebo"
  ".msgs.Vector3d\022\'\n\010vec_left\030\002 \001(\0132\025.gazeb"
  "o.msgs.Vector3d\022\'\n\010vec_back\030\003 \001(\0132\025.gaze"
  "bo.msgs.Vector3d\022(\n\tvec_right\030\004 \001(\0132\025.ga"
  "zebo.msgs.Vector3d\"\212\001\n\nRobotState\022\n\n\002id\030"
  "\001 \002(\r\022\014\n\004name\030\002 \002(\t\022\037\n\004pose\030\003 \002(\0132\021.gaze"
  "bo.msgs.Pose\022\014\n\004dead\030\004 \001(\010\0223\n\020orientatio"
  "n_vecs\030\005 \001(\0132\031.revolve.msgs.Orientation\""
  "]\n\013RobotStates\022\037\n\004time\030\001 \002(\0132\021.gazebo.ms"
  "gs.Time\022-\n\013robot_state\030\002 \003(\0132\030.revolve.m"
  "sgs.RobotState"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5fstates_2eproto_deps[3] = {
  &::descriptor_table_pose_2eproto,
  &::descriptor_table_time_2eproto,
  &::descriptor_table_vector3d_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5fstates_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fstates_2eproto = {
  false, false, 494, descriptor_table_protodef_robot_5fstates_2eproto, "robot_states.proto", 
  &descriptor_table_robot_5fstates_2eproto_once, descriptor_table_robot_5fstates_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_robot_5fstates_2eproto::offsets,
  file_level_metadata_robot_5fstates_2eproto, file_level_enum_descriptors_robot_5fstates_2eproto, file_level_service_descriptors_robot_5fstates_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_robot_5fstates_2eproto_getter() {
  return &descriptor_table_robot_5fstates_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_robot_5fstates_2eproto(&descriptor_table_robot_5fstates_2eproto);
namespace revolve {
namespace msgs {

// ===================================================================

class Orientation::_Internal {
 public:
  using HasBits = decltype(std::declval<Orientation>()._has_bits_);
  static const ::gazebo::msgs::Vector3d& vec_forward(const Orientation* msg);
  static void set_has_vec_forward(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Vector3d& vec_left(const Orientation* msg);
  static void set_has_vec_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::gazebo::msgs::Vector3d& vec_back(const Orientation* msg);
  static void set_has_vec_back(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::gazebo::msgs::Vector3d& vec_right(const Orientation* msg);
  static void set_has_vec_right(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::gazebo::msgs::Vector3d&
Orientation::_Internal::vec_forward(const Orientation* msg) {
  return *msg->vec_forward_;
}
const ::gazebo::msgs::Vector3d&
Orientation::_Internal::vec_left(const Orientation* msg) {
  return *msg->vec_left_;
}
const ::gazebo::msgs::Vector3d&
Orientation::_Internal::vec_back(const Orientation* msg) {
  return *msg->vec_back_;
}
const ::gazebo::msgs::Vector3d&
Orientation::_Internal::vec_right(const Orientation* msg) {
  return *msg->vec_right_;
}
void Orientation::clear_vec_forward() {
  if (vec_forward_ != nullptr) vec_forward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Orientation::clear_vec_left() {
  if (vec_left_ != nullptr) vec_left_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Orientation::clear_vec_back() {
  if (vec_back_ != nullptr) vec_back_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Orientation::clear_vec_right() {
  if (vec_right_ != nullptr) vec_right_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vec_forward()) {
    vec_forward_ = new ::gazebo::msgs::Vector3d(*from.vec_forward_);
  } else {
    vec_forward_ = nullptr;
  }
  if (from._internal_has_vec_left()) {
    vec_left_ = new ::gazebo::msgs::Vector3d(*from.vec_left_);
  } else {
    vec_left_ = nullptr;
  }
  if (from._internal_has_vec_back()) {
    vec_back_ = new ::gazebo::msgs::Vector3d(*from.vec_back_);
  } else {
    vec_back_ = nullptr;
  }
  if (from._internal_has_vec_right()) {
    vec_right_ = new ::gazebo::msgs::Vector3d(*from.vec_right_);
  } else {
    vec_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.Orientation)
}

void Orientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vec_forward_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vec_right_) -
    reinterpret_cast<char*>(&vec_forward_)) + sizeof(vec_right_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:revolve.msgs.Orientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vec_forward_;
  if (this != internal_default_instance()) delete vec_left_;
  if (this != internal_default_instance()) delete vec_back_;
  if (this != internal_default_instance()) delete vec_right_;
}

void Orientation::ArenaDtor(void* object) {
  Orientation* _this = reinterpret_cast< Orientation* >(object);
  (void)_this;
}
void Orientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(vec_forward_ != nullptr);
      vec_forward_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vec_left_ != nullptr);
      vec_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vec_back_ != nullptr);
      vec_back_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vec_right_ != nullptr);
      vec_right_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .gazebo.msgs.Vector3d vec_forward = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec_forward(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d vec_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d vec_back = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec_back(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .gazebo.msgs.Vector3d vec_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vec_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .gazebo.msgs.Vector3d vec_forward = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vec_forward(this), target, stream);
  }

  // optional .gazebo.msgs.Vector3d vec_left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vec_left(this), target, stream);
  }

  // optional .gazebo.msgs.Vector3d vec_back = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vec_back(this), target, stream);
  }

  // optional .gazebo.msgs.Vector3d vec_right = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vec_right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.Orientation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .gazebo.msgs.Vector3d vec_forward = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vec_forward_);
    }

    // optional .gazebo.msgs.Vector3d vec_left = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vec_left_);
    }

    // optional .gazebo.msgs.Vector3d vec_back = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vec_back_);
    }

    // optional .gazebo.msgs.Vector3d vec_right = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vec_right_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }

void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Orientation *>(to)->MergeFrom(
      static_cast<const Orientation &>(from));
}


void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_vec_forward()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_vec_forward());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vec_left()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_vec_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vec_back()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_vec_back());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vec_right()->::gazebo::msgs::Vector3d::MergeFrom(from._internal_vec_right());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  if (_internal_has_vec_forward()) {
    if (!vec_forward_->IsInitialized()) return false;
  }
  if (_internal_has_vec_left()) {
    if (!vec_left_->IsInitialized()) return false;
  }
  if (_internal_has_vec_back()) {
    if (!vec_back_->IsInitialized()) return false;
  }
  if (_internal_has_vec_right()) {
    if (!vec_right_->IsInitialized()) return false;
  }
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation, vec_right_)
      + sizeof(Orientation::vec_right_)
      - PROTOBUF_FIELD_OFFSET(Orientation, vec_forward_)>(
          reinterpret_cast<char*>(&vec_forward_),
          reinterpret_cast<char*>(&other->vec_forward_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstates_2eproto_getter, &descriptor_table_robot_5fstates_2eproto_once,
      file_level_metadata_robot_5fstates_2eproto[0]);
}

// ===================================================================

class RobotState::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotState>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::gazebo::msgs::Pose& pose(const RobotState* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dead(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::revolve::msgs::Orientation& orientation_vecs(const RobotState* msg);
  static void set_has_orientation_vecs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::gazebo::msgs::Pose&
RobotState::_Internal::pose(const RobotState* msg) {
  return *msg->pose_;
}
const ::revolve::msgs::Orientation&
RobotState::_Internal::orientation_vecs(const RobotState* msg) {
  return *msg->orientation_vecs_;
}
void RobotState::clear_pose() {
  if (pose_ != nullptr) pose_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
RobotState::RobotState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.RobotState)
}
RobotState::RobotState(const RobotState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::gazebo::msgs::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_orientation_vecs()) {
    orientation_vecs_ = new ::revolve::msgs::Orientation(*from.orientation_vecs_);
  } else {
    orientation_vecs_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dead_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dead_));
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.RobotState)
}

void RobotState::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dead_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(dead_));
}

RobotState::~RobotState() {
  // @@protoc_insertion_point(destructor:revolve.msgs.RobotState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete orientation_vecs_;
}

void RobotState::ArenaDtor(void* object) {
  RobotState* _this = reinterpret_cast< RobotState* >(object);
  (void)_this;
}
void RobotState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotState::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pose_ != nullptr);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(orientation_vecs_ != nullptr);
      orientation_vecs_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dead_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dead_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "revolve.msgs.RobotState.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .gazebo.msgs.Pose pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dead = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dead(&has_bits);
          dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .revolve.msgs.Orientation orientation_vecs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation_vecs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.RobotState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "revolve.msgs.RobotState.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required .gazebo.msgs.Pose pose = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  // optional bool dead = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_dead(), target);
  }

  // optional .revolve.msgs.Orientation orientation_vecs = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::orientation_vecs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.RobotState)
  return target;
}

size_t RobotState::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:revolve.msgs.RobotState)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_pose()) {
    // required .gazebo.msgs.Pose pose = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  return total_size;
}
size_t RobotState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.RobotState)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .gazebo.msgs.Pose pose = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);

    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .revolve.msgs.Orientation orientation_vecs = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_vecs_);
  }

  // optional bool dead = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotState::GetClassData() const { return &_class_data_; }

void RobotState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotState *>(to)->MergeFrom(
      static_cast<const RobotState &>(from));
}


void RobotState::MergeFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.RobotState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pose()->::gazebo::msgs::Pose::MergeFrom(from._internal_pose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_orientation_vecs()->::revolve::msgs::Orientation::MergeFrom(from._internal_orientation_vecs());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      dead_ = from.dead_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotState::CopyFrom(const RobotState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.RobotState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotState::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_pose()) {
    if (!pose_->IsInitialized()) return false;
  }
  if (_internal_has_orientation_vecs()) {
    if (!orientation_vecs_->IsInitialized()) return false;
  }
  return true;
}

void RobotState::InternalSwap(RobotState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotState, dead_)
      + sizeof(RobotState::dead_)
      - PROTOBUF_FIELD_OFFSET(RobotState, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstates_2eproto_getter, &descriptor_table_robot_5fstates_2eproto_once,
      file_level_metadata_robot_5fstates_2eproto[1]);
}

// ===================================================================

class RobotStates::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotStates>()._has_bits_);
  static const ::gazebo::msgs::Time& time(const RobotStates* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::gazebo::msgs::Time&
RobotStates::_Internal::time(const RobotStates* msg) {
  return *msg->time_;
}
void RobotStates::clear_time() {
  if (time_ != nullptr) time_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
RobotStates::RobotStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  robot_state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:revolve.msgs.RobotStates)
}
RobotStates::RobotStates(const RobotStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      robot_state_(from.robot_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::gazebo::msgs::Time(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:revolve.msgs.RobotStates)
}

void RobotStates::SharedCtor() {
time_ = nullptr;
}

RobotStates::~RobotStates() {
  // @@protoc_insertion_point(destructor:revolve.msgs.RobotStates)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RobotStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
}

void RobotStates::ArenaDtor(void* object) {
  RobotStates* _this = reinterpret_cast< RobotStates* >(object);
  (void)_this;
}
void RobotStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RobotStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotStates::Clear() {
// @@protoc_insertion_point(message_clear_start:revolve.msgs.RobotStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(time_ != nullptr);
    time_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .gazebo.msgs.Time time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .revolve.msgs.RobotState robot_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RobotStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:revolve.msgs.RobotStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gazebo.msgs.Time time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // repeated .revolve.msgs.RobotState robot_state = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robot_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_robot_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:revolve.msgs.RobotStates)
  return target;
}

size_t RobotStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:revolve.msgs.RobotStates)
  size_t total_size = 0;

  // required .gazebo.msgs.Time time = 1;
  if (_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .revolve.msgs.RobotState robot_state = 2;
  total_size += 1UL * this->_internal_robot_state_size();
  for (const auto& msg : this->robot_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotStates::GetClassData() const { return &_class_data_; }

void RobotStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RobotStates *>(to)->MergeFrom(
      static_cast<const RobotStates &>(from));
}


void RobotStates::MergeFrom(const RobotStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:revolve.msgs.RobotStates)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_state_.MergeFrom(from.robot_state_);
  if (from._internal_has_time()) {
    _internal_mutable_time()->::gazebo::msgs::Time::MergeFrom(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotStates::CopyFrom(const RobotStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:revolve.msgs.RobotStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotStates::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(robot_state_)) return false;
  if (_internal_has_time()) {
    if (!time_->IsInitialized()) return false;
  }
  return true;
}

void RobotStates::InternalSwap(RobotStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_state_.InternalSwap(&other->robot_state_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_robot_5fstates_2eproto_getter, &descriptor_table_robot_5fstates_2eproto_once,
      file_level_metadata_robot_5fstates_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::revolve::msgs::Orientation* Arena::CreateMaybeMessage< ::revolve::msgs::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::revolve::msgs::RobotState* Arena::CreateMaybeMessage< ::revolve::msgs::RobotState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::RobotState >(arena);
}
template<> PROTOBUF_NOINLINE ::revolve::msgs::RobotStates* Arena::CreateMaybeMessage< ::revolve::msgs::RobotStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::revolve::msgs::RobotStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
