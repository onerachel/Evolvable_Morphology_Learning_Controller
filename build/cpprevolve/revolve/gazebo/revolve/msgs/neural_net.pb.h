// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neural_net.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_neural_5fnet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_neural_5fnet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "parameter.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_neural_5fnet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_neural_5fnet_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_neural_5fnet_2eproto;
namespace revolve {
namespace msgs {
class ModifyNeuralNetwork;
struct ModifyNeuralNetworkDefaultTypeInternal;
extern ModifyNeuralNetworkDefaultTypeInternal _ModifyNeuralNetwork_default_instance_;
class NeuralConnection;
struct NeuralConnectionDefaultTypeInternal;
extern NeuralConnectionDefaultTypeInternal _NeuralConnection_default_instance_;
class NeuralNetwork;
struct NeuralNetworkDefaultTypeInternal;
extern NeuralNetworkDefaultTypeInternal _NeuralNetwork_default_instance_;
class Neuron;
struct NeuronDefaultTypeInternal;
extern NeuronDefaultTypeInternal _Neuron_default_instance_;
}  // namespace msgs
}  // namespace revolve
PROTOBUF_NAMESPACE_OPEN
template<> ::revolve::msgs::ModifyNeuralNetwork* Arena::CreateMaybeMessage<::revolve::msgs::ModifyNeuralNetwork>(Arena*);
template<> ::revolve::msgs::NeuralConnection* Arena::CreateMaybeMessage<::revolve::msgs::NeuralConnection>(Arena*);
template<> ::revolve::msgs::NeuralNetwork* Arena::CreateMaybeMessage<::revolve::msgs::NeuralNetwork>(Arena*);
template<> ::revolve::msgs::Neuron* Arena::CreateMaybeMessage<::revolve::msgs::Neuron>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace revolve {
namespace msgs {

// ===================================================================

class NeuralConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.NeuralConnection) */ {
 public:
  inline NeuralConnection() : NeuralConnection(nullptr) {}
  ~NeuralConnection() override;
  explicit constexpr NeuralConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NeuralConnection(const NeuralConnection& from);
  NeuralConnection(NeuralConnection&& from) noexcept
    : NeuralConnection() {
    *this = ::std::move(from);
  }

  inline NeuralConnection& operator=(const NeuralConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeuralConnection& operator=(NeuralConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NeuralConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const NeuralConnection* internal_default_instance() {
    return reinterpret_cast<const NeuralConnection*>(
               &_NeuralConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NeuralConnection& a, NeuralConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(NeuralConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeuralConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeuralConnection* New() const final {
    return new NeuralConnection();
  }

  NeuralConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeuralConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NeuralConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NeuralConnection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.NeuralConnection";
  }
  protected:
  explicit NeuralConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kDstFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // required string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src();
  PROTOBUF_MUST_USE_RESULT std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // required string dst = 2;
  bool has_dst() const;
  private:
  bool _internal_has_dst() const;
  public:
  void clear_dst();
  const std::string& dst() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dst(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dst();
  PROTOBUF_MUST_USE_RESULT std::string* release_dst();
  void set_allocated_dst(std::string* dst);
  private:
  const std::string& _internal_dst() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dst(const std::string& value);
  std::string* _internal_mutable_dst();
  public:

  // required double weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.NeuralConnection)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_;
  double weight_;
  friend struct ::TableStruct_neural_5fnet_2eproto;
};
// -------------------------------------------------------------------

class Neuron final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.Neuron) */ {
 public:
  inline Neuron() : Neuron(nullptr) {}
  ~Neuron() override;
  explicit constexpr Neuron(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Neuron(const Neuron& from);
  Neuron(Neuron&& from) noexcept
    : Neuron() {
    *this = ::std::move(from);
  }

  inline Neuron& operator=(const Neuron& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neuron& operator=(Neuron&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Neuron& default_instance() {
    return *internal_default_instance();
  }
  static inline const Neuron* internal_default_instance() {
    return reinterpret_cast<const Neuron*>(
               &_Neuron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Neuron& a, Neuron& b) {
    a.Swap(&b);
  }
  inline void Swap(Neuron* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Neuron* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neuron* New() const final {
    return new Neuron();
  }

  Neuron* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neuron>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Neuron& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Neuron& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neuron* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.Neuron";
  }
  protected:
  explicit Neuron(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamFieldNumber = 5,
    kIdFieldNumber = 1,
    kLayerFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPartIdFieldNumber = 4,
  };
  // repeated .revolve.msgs.Parameter param = 5;
  int param_size() const;
  private:
  int _internal_param_size() const;
  public:
  void clear_param();
  ::revolve::msgs::Parameter* mutable_param(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >*
      mutable_param();
  private:
  const ::revolve::msgs::Parameter& _internal_param(int index) const;
  ::revolve::msgs::Parameter* _internal_add_param();
  public:
  const ::revolve::msgs::Parameter& param(int index) const;
  ::revolve::msgs::Parameter* add_param();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >&
      param() const;

  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string layer = 2;
  bool has_layer() const;
  private:
  bool _internal_has_layer() const;
  public:
  void clear_layer();
  const std::string& layer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layer();
  PROTOBUF_MUST_USE_RESULT std::string* release_layer();
  void set_allocated_layer(std::string* layer);
  private:
  const std::string& _internal_layer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layer(const std::string& value);
  std::string* _internal_mutable_layer();
  public:

  // required string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional string partId = 4;
  bool has_partid() const;
  private:
  bool _internal_has_partid() const;
  public:
  void clear_partid();
  const std::string& partid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partid();
  PROTOBUF_MUST_USE_RESULT std::string* release_partid();
  void set_allocated_partid(std::string* partid);
  private:
  const std::string& _internal_partid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partid(const std::string& value);
  std::string* _internal_mutable_partid();
  public:

  // @@protoc_insertion_point(class_scope:revolve.msgs.Neuron)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter > param_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partid_;
  friend struct ::TableStruct_neural_5fnet_2eproto;
};
// -------------------------------------------------------------------

class NeuralNetwork final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.NeuralNetwork) */ {
 public:
  inline NeuralNetwork() : NeuralNetwork(nullptr) {}
  ~NeuralNetwork() override;
  explicit constexpr NeuralNetwork(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NeuralNetwork(const NeuralNetwork& from);
  NeuralNetwork(NeuralNetwork&& from) noexcept
    : NeuralNetwork() {
    *this = ::std::move(from);
  }

  inline NeuralNetwork& operator=(const NeuralNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeuralNetwork& operator=(NeuralNetwork&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NeuralNetwork& default_instance() {
    return *internal_default_instance();
  }
  static inline const NeuralNetwork* internal_default_instance() {
    return reinterpret_cast<const NeuralNetwork*>(
               &_NeuralNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NeuralNetwork& a, NeuralNetwork& b) {
    a.Swap(&b);
  }
  inline void Swap(NeuralNetwork* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeuralNetwork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NeuralNetwork* New() const final {
    return new NeuralNetwork();
  }

  NeuralNetwork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NeuralNetwork>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NeuralNetwork& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NeuralNetwork& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeuralNetwork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.NeuralNetwork";
  }
  protected:
  explicit NeuralNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeuronFieldNumber = 1,
    kConnectionFieldNumber = 2,
  };
  // repeated .revolve.msgs.Neuron neuron = 1;
  int neuron_size() const;
  private:
  int _internal_neuron_size() const;
  public:
  void clear_neuron();
  ::revolve::msgs::Neuron* mutable_neuron(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_neuron();
  private:
  const ::revolve::msgs::Neuron& _internal_neuron(int index) const;
  ::revolve::msgs::Neuron* _internal_add_neuron();
  public:
  const ::revolve::msgs::Neuron& neuron(int index) const;
  ::revolve::msgs::Neuron* add_neuron();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
      neuron() const;

  // repeated .revolve.msgs.NeuralConnection connection = 2;
  int connection_size() const;
  private:
  int _internal_connection_size() const;
  public:
  void clear_connection();
  ::revolve::msgs::NeuralConnection* mutable_connection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
      mutable_connection();
  private:
  const ::revolve::msgs::NeuralConnection& _internal_connection(int index) const;
  ::revolve::msgs::NeuralConnection* _internal_add_connection();
  public:
  const ::revolve::msgs::NeuralConnection& connection(int index) const;
  ::revolve::msgs::NeuralConnection* add_connection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
      connection() const;

  // @@protoc_insertion_point(class_scope:revolve.msgs.NeuralNetwork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron > neuron_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection > connection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_neural_5fnet_2eproto;
};
// -------------------------------------------------------------------

class ModifyNeuralNetwork final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:revolve.msgs.ModifyNeuralNetwork) */ {
 public:
  inline ModifyNeuralNetwork() : ModifyNeuralNetwork(nullptr) {}
  ~ModifyNeuralNetwork() override;
  explicit constexpr ModifyNeuralNetwork(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModifyNeuralNetwork(const ModifyNeuralNetwork& from);
  ModifyNeuralNetwork(ModifyNeuralNetwork&& from) noexcept
    : ModifyNeuralNetwork() {
    *this = ::std::move(from);
  }

  inline ModifyNeuralNetwork& operator=(const ModifyNeuralNetwork& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModifyNeuralNetwork& operator=(ModifyNeuralNetwork&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModifyNeuralNetwork& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModifyNeuralNetwork* internal_default_instance() {
    return reinterpret_cast<const ModifyNeuralNetwork*>(
               &_ModifyNeuralNetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModifyNeuralNetwork& a, ModifyNeuralNetwork& b) {
    a.Swap(&b);
  }
  inline void Swap(ModifyNeuralNetwork* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModifyNeuralNetwork* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModifyNeuralNetwork* New() const final {
    return new ModifyNeuralNetwork();
  }

  ModifyNeuralNetwork* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModifyNeuralNetwork>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModifyNeuralNetwork& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModifyNeuralNetwork& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModifyNeuralNetwork* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "revolve.msgs.ModifyNeuralNetwork";
  }
  protected:
  explicit ModifyNeuralNetwork(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveHiddenFieldNumber = 1,
    kAddHiddenFieldNumber = 2,
    kSetWeightsFieldNumber = 3,
    kSetParametersFieldNumber = 4,
  };
  // repeated string remove_hidden = 1;
  int remove_hidden_size() const;
  private:
  int _internal_remove_hidden_size() const;
  public:
  void clear_remove_hidden();
  const std::string& remove_hidden(int index) const;
  std::string* mutable_remove_hidden(int index);
  void set_remove_hidden(int index, const std::string& value);
  void set_remove_hidden(int index, std::string&& value);
  void set_remove_hidden(int index, const char* value);
  void set_remove_hidden(int index, const char* value, size_t size);
  std::string* add_remove_hidden();
  void add_remove_hidden(const std::string& value);
  void add_remove_hidden(std::string&& value);
  void add_remove_hidden(const char* value);
  void add_remove_hidden(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remove_hidden() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remove_hidden();
  private:
  const std::string& _internal_remove_hidden(int index) const;
  std::string* _internal_add_remove_hidden();
  public:

  // repeated .revolve.msgs.Neuron add_hidden = 2;
  int add_hidden_size() const;
  private:
  int _internal_add_hidden_size() const;
  public:
  void clear_add_hidden();
  ::revolve::msgs::Neuron* mutable_add_hidden(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_add_hidden();
  private:
  const ::revolve::msgs::Neuron& _internal_add_hidden(int index) const;
  ::revolve::msgs::Neuron* _internal_add_add_hidden();
  public:
  const ::revolve::msgs::Neuron& add_hidden(int index) const;
  ::revolve::msgs::Neuron* add_add_hidden();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
      add_hidden() const;

  // repeated .revolve.msgs.NeuralConnection set_weights = 3;
  int set_weights_size() const;
  private:
  int _internal_set_weights_size() const;
  public:
  void clear_set_weights();
  ::revolve::msgs::NeuralConnection* mutable_set_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
      mutable_set_weights();
  private:
  const ::revolve::msgs::NeuralConnection& _internal_set_weights(int index) const;
  ::revolve::msgs::NeuralConnection* _internal_add_set_weights();
  public:
  const ::revolve::msgs::NeuralConnection& set_weights(int index) const;
  ::revolve::msgs::NeuralConnection* add_set_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
      set_weights() const;

  // repeated .revolve.msgs.Neuron set_parameters = 4;
  int set_parameters_size() const;
  private:
  int _internal_set_parameters_size() const;
  public:
  void clear_set_parameters();
  ::revolve::msgs::Neuron* mutable_set_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
      mutable_set_parameters();
  private:
  const ::revolve::msgs::Neuron& _internal_set_parameters(int index) const;
  ::revolve::msgs::Neuron* _internal_add_set_parameters();
  public:
  const ::revolve::msgs::Neuron& set_parameters(int index) const;
  ::revolve::msgs::Neuron* add_set_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
      set_parameters() const;

  // @@protoc_insertion_point(class_scope:revolve.msgs.ModifyNeuralNetwork)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remove_hidden_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron > add_hidden_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection > set_weights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron > set_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_neural_5fnet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NeuralConnection

// required string src = 1;
inline bool NeuralConnection::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NeuralConnection::has_src() const {
  return _internal_has_src();
}
inline void NeuralConnection::clear_src() {
  src_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NeuralConnection::src() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.src)
  return _internal_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NeuralConnection::set_src(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.src)
}
inline std::string* NeuralConnection::mutable_src() {
  std::string* _s = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralConnection.src)
  return _s;
}
inline const std::string& NeuralConnection::_internal_src() const {
  return src_.Get();
}
inline void NeuralConnection::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NeuralConnection::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NeuralConnection::release_src() {
  // @@protoc_insertion_point(field_release:revolve.msgs.NeuralConnection.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return src_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NeuralConnection::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.NeuralConnection.src)
}

// required string dst = 2;
inline bool NeuralConnection::_internal_has_dst() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NeuralConnection::has_dst() const {
  return _internal_has_dst();
}
inline void NeuralConnection::clear_dst() {
  dst_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NeuralConnection::dst() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.dst)
  return _internal_dst();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NeuralConnection::set_dst(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 dst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.dst)
}
inline std::string* NeuralConnection::mutable_dst() {
  std::string* _s = _internal_mutable_dst();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralConnection.dst)
  return _s;
}
inline const std::string& NeuralConnection::_internal_dst() const {
  return dst_.Get();
}
inline void NeuralConnection::_internal_set_dst(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dst_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NeuralConnection::_internal_mutable_dst() {
  _has_bits_[0] |= 0x00000002u;
  return dst_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NeuralConnection::release_dst() {
  // @@protoc_insertion_point(field_release:revolve.msgs.NeuralConnection.dst)
  if (!_internal_has_dst()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dst_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NeuralConnection::set_allocated_dst(std::string* dst) {
  if (dst != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dst_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.NeuralConnection.dst)
}

// required double weight = 3;
inline bool NeuralConnection::_internal_has_weight() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NeuralConnection::has_weight() const {
  return _internal_has_weight();
}
inline void NeuralConnection::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double NeuralConnection::_internal_weight() const {
  return weight_;
}
inline double NeuralConnection::weight() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralConnection.weight)
  return _internal_weight();
}
inline void NeuralConnection::_internal_set_weight(double value) {
  _has_bits_[0] |= 0x00000004u;
  weight_ = value;
}
inline void NeuralConnection::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.NeuralConnection.weight)
}

// -------------------------------------------------------------------

// Neuron

// required string id = 1;
inline bool Neuron::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Neuron::has_id() const {
  return _internal_has_id();
}
inline void Neuron::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Neuron::id() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Neuron::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.id)
}
inline std::string* Neuron::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.id)
  return _s;
}
inline const std::string& Neuron::_internal_id() const {
  return id_.Get();
}
inline void Neuron::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Neuron::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Neuron::release_id() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Neuron::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.id)
}

// required string layer = 2;
inline bool Neuron::_internal_has_layer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Neuron::has_layer() const {
  return _internal_has_layer();
}
inline void Neuron::clear_layer() {
  layer_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Neuron::layer() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.layer)
  return _internal_layer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Neuron::set_layer(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.layer)
}
inline std::string* Neuron::mutable_layer() {
  std::string* _s = _internal_mutable_layer();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.layer)
  return _s;
}
inline const std::string& Neuron::_internal_layer() const {
  return layer_.Get();
}
inline void Neuron::_internal_set_layer(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  layer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Neuron::_internal_mutable_layer() {
  _has_bits_[0] |= 0x00000002u;
  return layer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Neuron::release_layer() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.layer)
  if (!_internal_has_layer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return layer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Neuron::set_allocated_layer(std::string* layer) {
  if (layer != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  layer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.layer)
}

// required string type = 3;
inline bool Neuron::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Neuron::has_type() const {
  return _internal_has_type();
}
inline void Neuron::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Neuron::type() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Neuron::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.type)
}
inline std::string* Neuron::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.type)
  return _s;
}
inline const std::string& Neuron::_internal_type() const {
  return type_.Get();
}
inline void Neuron::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Neuron::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Neuron::release_type() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Neuron::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.type)
}

// optional string partId = 4;
inline bool Neuron::_internal_has_partid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Neuron::has_partid() const {
  return _internal_has_partid();
}
inline void Neuron::clear_partid() {
  partid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Neuron::partid() const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.partId)
  return _internal_partid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Neuron::set_partid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 partid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:revolve.msgs.Neuron.partId)
}
inline std::string* Neuron::mutable_partid() {
  std::string* _s = _internal_mutable_partid();
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.partId)
  return _s;
}
inline const std::string& Neuron::_internal_partid() const {
  return partid_.Get();
}
inline void Neuron::_internal_set_partid(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  partid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Neuron::_internal_mutable_partid() {
  _has_bits_[0] |= 0x00000008u;
  return partid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Neuron::release_partid() {
  // @@protoc_insertion_point(field_release:revolve.msgs.Neuron.partId)
  if (!_internal_has_partid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return partid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Neuron::set_allocated_partid(std::string* partid) {
  if (partid != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  partid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), partid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:revolve.msgs.Neuron.partId)
}

// repeated .revolve.msgs.Parameter param = 5;
inline int Neuron::_internal_param_size() const {
  return param_.size();
}
inline int Neuron::param_size() const {
  return _internal_param_size();
}
inline ::revolve::msgs::Parameter* Neuron::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.Neuron.param)
  return param_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >*
Neuron::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.Neuron.param)
  return &param_;
}
inline const ::revolve::msgs::Parameter& Neuron::_internal_param(int index) const {
  return param_.Get(index);
}
inline const ::revolve::msgs::Parameter& Neuron::param(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.Neuron.param)
  return _internal_param(index);
}
inline ::revolve::msgs::Parameter* Neuron::_internal_add_param() {
  return param_.Add();
}
inline ::revolve::msgs::Parameter* Neuron::add_param() {
  ::revolve::msgs::Parameter* _add = _internal_add_param();
  // @@protoc_insertion_point(field_add:revolve.msgs.Neuron.param)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Parameter >&
Neuron::param() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.Neuron.param)
  return param_;
}

// -------------------------------------------------------------------

// NeuralNetwork

// repeated .revolve.msgs.Neuron neuron = 1;
inline int NeuralNetwork::_internal_neuron_size() const {
  return neuron_.size();
}
inline int NeuralNetwork::neuron_size() const {
  return _internal_neuron_size();
}
inline void NeuralNetwork::clear_neuron() {
  neuron_.Clear();
}
inline ::revolve::msgs::Neuron* NeuralNetwork::mutable_neuron(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralNetwork.neuron)
  return neuron_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
NeuralNetwork::mutable_neuron() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.NeuralNetwork.neuron)
  return &neuron_;
}
inline const ::revolve::msgs::Neuron& NeuralNetwork::_internal_neuron(int index) const {
  return neuron_.Get(index);
}
inline const ::revolve::msgs::Neuron& NeuralNetwork::neuron(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralNetwork.neuron)
  return _internal_neuron(index);
}
inline ::revolve::msgs::Neuron* NeuralNetwork::_internal_add_neuron() {
  return neuron_.Add();
}
inline ::revolve::msgs::Neuron* NeuralNetwork::add_neuron() {
  ::revolve::msgs::Neuron* _add = _internal_add_neuron();
  // @@protoc_insertion_point(field_add:revolve.msgs.NeuralNetwork.neuron)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
NeuralNetwork::neuron() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.NeuralNetwork.neuron)
  return neuron_;
}

// repeated .revolve.msgs.NeuralConnection connection = 2;
inline int NeuralNetwork::_internal_connection_size() const {
  return connection_.size();
}
inline int NeuralNetwork::connection_size() const {
  return _internal_connection_size();
}
inline void NeuralNetwork::clear_connection() {
  connection_.Clear();
}
inline ::revolve::msgs::NeuralConnection* NeuralNetwork::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.NeuralNetwork.connection)
  return connection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
NeuralNetwork::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.NeuralNetwork.connection)
  return &connection_;
}
inline const ::revolve::msgs::NeuralConnection& NeuralNetwork::_internal_connection(int index) const {
  return connection_.Get(index);
}
inline const ::revolve::msgs::NeuralConnection& NeuralNetwork::connection(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.NeuralNetwork.connection)
  return _internal_connection(index);
}
inline ::revolve::msgs::NeuralConnection* NeuralNetwork::_internal_add_connection() {
  return connection_.Add();
}
inline ::revolve::msgs::NeuralConnection* NeuralNetwork::add_connection() {
  ::revolve::msgs::NeuralConnection* _add = _internal_add_connection();
  // @@protoc_insertion_point(field_add:revolve.msgs.NeuralNetwork.connection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
NeuralNetwork::connection() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.NeuralNetwork.connection)
  return connection_;
}

// -------------------------------------------------------------------

// ModifyNeuralNetwork

// repeated string remove_hidden = 1;
inline int ModifyNeuralNetwork::_internal_remove_hidden_size() const {
  return remove_hidden_.size();
}
inline int ModifyNeuralNetwork::remove_hidden_size() const {
  return _internal_remove_hidden_size();
}
inline void ModifyNeuralNetwork::clear_remove_hidden() {
  remove_hidden_.Clear();
}
inline std::string* ModifyNeuralNetwork::add_remove_hidden() {
  std::string* _s = _internal_add_remove_hidden();
  // @@protoc_insertion_point(field_add_mutable:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return _s;
}
inline const std::string& ModifyNeuralNetwork::_internal_remove_hidden(int index) const {
  return remove_hidden_.Get(index);
}
inline const std::string& ModifyNeuralNetwork::remove_hidden(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return _internal_remove_hidden(index);
}
inline std::string* ModifyNeuralNetwork::mutable_remove_hidden(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_.Mutable(index);
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const std::string& value) {
  remove_hidden_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, std::string&& value) {
  remove_hidden_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remove_hidden_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::set_remove_hidden(int index, const char* value, size_t size) {
  remove_hidden_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline std::string* ModifyNeuralNetwork::_internal_add_remove_hidden() {
  return remove_hidden_.Add();
}
inline void ModifyNeuralNetwork::add_remove_hidden(const std::string& value) {
  remove_hidden_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::add_remove_hidden(std::string&& value) {
  remove_hidden_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::add_remove_hidden(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remove_hidden_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline void ModifyNeuralNetwork::add_remove_hidden(const char* value, size_t size) {
  remove_hidden_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ModifyNeuralNetwork::remove_hidden() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return remove_hidden_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ModifyNeuralNetwork::mutable_remove_hidden() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.remove_hidden)
  return &remove_hidden_;
}

// repeated .revolve.msgs.Neuron add_hidden = 2;
inline int ModifyNeuralNetwork::_internal_add_hidden_size() const {
  return add_hidden_.size();
}
inline int ModifyNeuralNetwork::add_hidden_size() const {
  return _internal_add_hidden_size();
}
inline void ModifyNeuralNetwork::clear_add_hidden() {
  add_hidden_.Clear();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::mutable_add_hidden(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
ModifyNeuralNetwork::mutable_add_hidden() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return &add_hidden_;
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::_internal_add_hidden(int index) const {
  return add_hidden_.Get(index);
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::add_hidden(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return _internal_add_hidden(index);
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::_internal_add_add_hidden() {
  return add_hidden_.Add();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::add_add_hidden() {
  ::revolve::msgs::Neuron* _add = _internal_add_add_hidden();
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
ModifyNeuralNetwork::add_hidden() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.add_hidden)
  return add_hidden_;
}

// repeated .revolve.msgs.Neuron set_parameters = 4;
inline int ModifyNeuralNetwork::_internal_set_parameters_size() const {
  return set_parameters_.size();
}
inline int ModifyNeuralNetwork::set_parameters_size() const {
  return _internal_set_parameters_size();
}
inline void ModifyNeuralNetwork::clear_set_parameters() {
  set_parameters_.Clear();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::mutable_set_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >*
ModifyNeuralNetwork::mutable_set_parameters() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return &set_parameters_;
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::_internal_set_parameters(int index) const {
  return set_parameters_.Get(index);
}
inline const ::revolve::msgs::Neuron& ModifyNeuralNetwork::set_parameters(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return _internal_set_parameters(index);
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::_internal_add_set_parameters() {
  return set_parameters_.Add();
}
inline ::revolve::msgs::Neuron* ModifyNeuralNetwork::add_set_parameters() {
  ::revolve::msgs::Neuron* _add = _internal_add_set_parameters();
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::Neuron >&
ModifyNeuralNetwork::set_parameters() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.set_parameters)
  return set_parameters_;
}

// repeated .revolve.msgs.NeuralConnection set_weights = 3;
inline int ModifyNeuralNetwork::_internal_set_weights_size() const {
  return set_weights_.size();
}
inline int ModifyNeuralNetwork::set_weights_size() const {
  return _internal_set_weights_size();
}
inline void ModifyNeuralNetwork::clear_set_weights() {
  set_weights_.Clear();
}
inline ::revolve::msgs::NeuralConnection* ModifyNeuralNetwork::mutable_set_weights(int index) {
  // @@protoc_insertion_point(field_mutable:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >*
ModifyNeuralNetwork::mutable_set_weights() {
  // @@protoc_insertion_point(field_mutable_list:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return &set_weights_;
}
inline const ::revolve::msgs::NeuralConnection& ModifyNeuralNetwork::_internal_set_weights(int index) const {
  return set_weights_.Get(index);
}
inline const ::revolve::msgs::NeuralConnection& ModifyNeuralNetwork::set_weights(int index) const {
  // @@protoc_insertion_point(field_get:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return _internal_set_weights(index);
}
inline ::revolve::msgs::NeuralConnection* ModifyNeuralNetwork::_internal_add_set_weights() {
  return set_weights_.Add();
}
inline ::revolve::msgs::NeuralConnection* ModifyNeuralNetwork::add_set_weights() {
  ::revolve::msgs::NeuralConnection* _add = _internal_add_set_weights();
  // @@protoc_insertion_point(field_add:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::revolve::msgs::NeuralConnection >&
ModifyNeuralNetwork::set_weights() const {
  // @@protoc_insertion_point(field_list:revolve.msgs.ModifyNeuralNetwork.set_weights)
  return set_weights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace revolve

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_neural_5fnet_2eproto
